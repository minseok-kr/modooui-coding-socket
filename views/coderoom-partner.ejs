<html>

<head>
    <meta charset="utf-8" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="/asset/js/chat.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/color/jquery.color-2.1.2.min.js" integrity="sha256-H28SdxWrZ387Ldn0qogCzFiUDDxfPiNIyJX7BECQkDE="
        crossorigin="anonymous"></script>
    <!--    <script src="./js/client.js"></script>-->
    <!--    <script src="./js/manager.js"></script>-->

    <script src="../asset/js/common.js"></script>

    <title>모두의 코딩</title>

    <!-- Code Mirror -->
    <link rel="stylesheet" href='/asset/css/code-mirror-style.css' />
    <link rel="stylesheet" href='/asset/css/common.css' />
    <link rel="stylesheet" href='/asset/css/manager-code.css' />
    <link rel="stylesheet" href='/asset/css/chips.css' />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.41.0/codemirror.min.js"></script>

    <!--        Highlighting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.41.0/addon/runmode/colorize.js"></script>
    <!--        Javascript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.41.0/mode/javascript/javascript.min.js"></script>

    <!--        Python -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.41.0/mode/python/python.min.js"></script>


    <link rel="stylesheet" href="/asset/css/bootstrap-theme.min.css">

    <link href='https://spoqa.github.io/spoqa-han-sans/css/SpoqaHanSans-kr.css' rel='stylesheet' type='text/css'>

    <link href="/asset/css/styles.css" rel="stylesheet" type='text/css' />
</head>

<body>

    <% include header %>
    <div id="container-room-label" class="container">
        <h3 id="txt-room-name"></h3>
    </div>
    <div class="jumbotron container">

        <span id="btn_invite" class="badge badge-success" title="" data-container="body" data-toggle="popover"
            data-placement="bottom" data-original-title="전달하세요!">초대하기</span>

        <span id="btn_modify_info" class="badge badge-info">수정내역 보내기</span>

        <div class="form-group">
            <label>문제</label>
            <input type="text" class="form-control form-control-sm col-md-6" id="txt-room-problem" placeholder="Problem description">
        </div>

        <div class="form-group">
            <label>예상입력</label>
            <input type="text" class="form-control form-control-sm col-md-6" id="room-input-expected" placeholder="Expected Input">
        </div>

        <div class="form-group">
            <label>예상출력</label>
            <input type="text" class="form-control form-control-sm col-md-6" id="room-output-expected" placeholder="Expected Output">
        </div>

    </div>
    <div class="container">
        <div id="wrapper-code"></div>

        <div id="container-control" style="display: none;">
            <button id='btn_fail' class='btn btn-danger'>실패</button>
            <button id='btn_success' class='btn btn-success'>성공
            </button>
        </div>
    </div>

    <div id="blind"></div>
</body>

<% include inner-chat %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy"
    crossorigin="anonymous"></script>
<script>

    let containerList = [];
    /* Socket.io 초기 설정 */
    $(function () {
        /**
       *   코드 에디터 초기화.
       */

        let getCodeEditor = function (id) {
            return `<div class="card client-view"><div class="card-body"><div class="client-code-view"><div id="txt-code-manager-` + id + `" class="inner-code-view code-small-view"></div></div></div></div>`
        }

        let getCodeLabel = function (userName, userImage) {
            return `<div><div style="display:none" class='control-panel'><button class='btn btn-danger btn_fail'>실패</button>
            <button class='btn btn-success btn_success'>성공</button></div><div class="chip"><img class="chip-head" src='` + userImage + `'/><div class="chip-content">` + userName + `</div></div></div>`
        }

        $(".CodeMirror textarea").attr("readonly", true);

        var socket = io();
        socket.emit('join', {
            type: "partner",
            userName: "<%= userName %>",
            room: "<%= roomNumber %>"
        })

        socket.on('connection', function (data) {
        });

        socket.on('codeUpdate', (data) => {
            // let data = {
            //     "code": code,
            //     "userId": "<%= userId %>",
            //     "roomNumber": "<%= roomNumber %>",
            // }

            $codeEditor = $("#wrapper-code");
            containerList.forEach(function (ele) {
                if (ele.clientId == data.userId) {
                    ele.view.setValue(data.code);
                }
            })

            notifyChange(data.userId, "yellow")

            $codeEditor.removeClass('helpped_client');
            $codeEditor.removeClass('submitted_client');

            // 업데이트시 제출 취소
            hideControlBox();
        });

        socket.on('somebodyHelp', (data) => {
            notifyResponse(data.userId, "blue")
        });

        socket.on('somebodySubmit', (data) => {
            notifyResponse(data.userId, "#3498db")

            showControlBox(data.userId);
        });

        function notifyChange(userId, color) {
            $card = $(".card:has(#txt-code-manager-" + userId + ")");
            $card.css('border', '1px solid ' + color);
            $card.stop().animate({
                'border-color': 'rgba(0,0,0,0.125)'
            }, 500);
        }

        function notifyResponse(userId, color) {
            $card = $(".card:has(#txt-code-manager-" + userId + ")");
            $card.css('border', '2px solid ' + color);
            // $card.stop().animate({
            // 'border-width': '1px',
            // 'border-color': 'rgba(0,0,0,0.125)'
            // }, 500);
        }

        /**
        *   Socket 관련 로직
        */
        function emitMessage(message) {
            socket.emit('message', message);
        }

        function emitCodeUpdate(code) {
            socket.emit('code', code);
        }

        function emitSubmitAnswer(answer) {
            socket.emit('submitAnswer', answer);
        }

        // $(".client-code-view textarea").attr("readonly", true);

        $("#blind").click(function () {
            // $(".huge").trigger();

            let e = $(".huge")
            e.css({
                "position": "static",
                "width": 300,
                "height": 270,
                "left": 0,
                "top": 0,
                "z-index": 0
            })

            $('#blind').stop().animate({ "opacity": 0 }, 500, null, function () {
                $(this).css({ "display": "none" });
            })

            $(".inner-code-view:nth-child(1)").removeClass('code-big-view');
            $(".inner-code-view:nth-child(1)").addClass('code-small-view');

            e.removeClass('huge');
        })

        /**
        *   코드 에디터 동작
        */
        $("#txt-code-manager textarea").keyup(function () {
            /* Emit */
            //                emitCodeUpdate(myCodeMirror.getValue());
        })

        /**
        *  채팅 소켓
        */
        socket.on("receivedMessage", function (msg) {
            let newRoom = msg.room;
            let newImg = msg.img;
            let newName = msg.name;
            let newMsg = msg.text;

            if ($("#dialog-content").css("display") == "none") {
                onNewMessage();
            }

            addMessage(newImg, newName, newMsg);
        })

        socket.on('handshakeRes', function (raw) {
            let data = {
                'room': raw.roomNumber,
                'userName': raw.userName,
                'userId': raw.userId,
                'userImg': raw.userImg,
            }

            makeNewCodePanel(data);
        })

        socket.on("alertChangeUserState", function (data) {
            if (data.state == "join") {
                makeNewCodePanel(data);
            }

            let newName = data.userName;
            // let state = data.state;
            let state = "";

            if ($("#dialog-content").css("display") == "none") {
                onNewMessage();
            }

            addSystem(newName, state);
        })

        function onNewMessage() {
            $('#dialog-chat').css({
                "border-width": "2px",
                "border-color": "#F7C251"
            })
            $('#dialog-chat').stop().animate({
                "border-width": "1px",
                "border-color": "#CCCCCC"
            }, 500);
        }

        $(".btn-dialog-toggle").click(function () {
            $("#dialog-content").toggle();
        })

        $('#chat-input input').keypress(function (event) {
            if (event.keyCode == 13) {
                let msg = $(this).val();
                $(this).val("");

                let roomNumber = "<%= roomNumber %>";
                let userImg = "<%= userImg %>";
                let userName = "<%= userName %>";

                socket.emit("sendMessage", {
                    room: roomNumber,
                    userImage: userImg,
                    userName: userName,
                    message: msg
                });

                addMessage(userImg, userName, msg);
            }
        });

        /**
         * 초대 링크 생성 버튼
         */
        $("#btn_invite").one("click", function (e) {
            $('[data-toggle="popover"]').popover();

            let paths = window.location.href.split('?')
            let room = paths[1];

            console.log(room);
            $.post('/api/invite/generate', { "room": room }, function (data) {
                let inviteCode = data.code

                $('[data-toggle="popover"]').attr("data-content", "localhost/v/" + inviteCode);
                // $('[data-toggle="popover"]').attr("data-content", "http://ec2-54-180-159-221.ap-northeast-2.compute.amazonaws.com/v/" + inviteCode);
                $('[data-toggle="popover"]').click();
            });
        });

        /**
         *  초기 방정보 로드
         */
        $.post('/api/room/getInfo', { type: "partner", code: "<%= roomNumber %>" }, function (data) {
            console.log(data);
            if (data != null) {
                $('#txt-room-name').html(data.title);

                let problem = data.problem;

                $('#txt-room-problem').val(problem.descript);
                $('#room-input-expected').val(problem.input);
                $('#room-output-expected').val(problem.output);

                let users = data.users;



                for (let i = 0; i < users.length; i++) {


                    // makeNewCodePanel()
                }

                // 유저 내용 가져오기

                // {
                //     _id: 5bfc2a2d3cf0fa84950b23e7,
                //         index: 1,
                //             title: '스터디에여',
                //                 description: '히히',
                //                     owner: '',
                //                         users: [''],
                //                             problem: { descript: '', input: '', output: '' }
                // }
            }
        });

        /**
         *  새로운 참여자 코드 창 만들기.
         * 
         */
        function makeNewCodePanel(data) {
            let userId = data.userId;
            let userName = data.userName;
            let userImg = data.userImg;

            // 중복 체크
            let isExist = false;
            containerList.forEach(function (element) {
                console.log(element.clientId + " / " + userId)
                if (element.clientId == userId) {
                    isExist = true;
                }
            })
            if (isExist) return;

            $('#wrapper-code').append(getCodeEditor(userId));

            // $('.card:has(#txt-code-manager-' + userId + ')').click(function (e) {
            $('.card:has(#txt-code-manager-' + userId + ') > .client-code-view').click(function (e) {
                e.stopPropagation();
                if (!$(this).hasClass('huge')) {
                    $(this).css({
                        "position": "fixed",
                        // "width": window.innerWidth - 400,
                        "width": 1000,
                        // "height": window.innerHeight - 400,
                        "height": 600,
                        "left": 200,
                        "top": 200,
                        "z-index": 999
                    })
                    $(this).addClass('huge');
                    $('#blind').stop()
                        .css({ "display": "block", "opacity": 0 })
                        .animate({ "opacity": 1 }, 500)

                    $(".inner-code-view:nth-child(1)").removeClass('code-small-view')
                    $(".inner-code-view:nth-child(1)").addClass('code-big-view');

                    $(this).css('border', '1px solid rgba(0,0,0,0.125)');

                    const refrsh = function () {
                        containerList[0].view.refresh()
                    }
                    setTimeout(refrsh, 50)
                }
            })

            let partnerCodeMirror = CodeMirror(document.getElementById("txt-code-manager-" + userId), {
                lineNumbers: true,
                mode: "python",
                tabSize: 8,
                showCursorWhenSelecting: false
            });
            $(".card-body:has(#txt-code-manager-" + userId + ")").append(getCodeLabel(userName, userImg))

            let codeView = {
                clientId: userId,
                view: partnerCodeMirror
            }

            containerList.push(codeView);
        }
        // state: "join",
        //     room: room,
        //         name: userNmae,
        //             photo: userImg,
        //                 userId: userId

        function showControlBox(userId) {
            $('.control-panel').css("display", "inline-block");

              $(".card:has(#txt-code-manager-" + userId + ") .btn_success").click(function (e) {
                emitSubmitAnswer("success");
                hideControlBox(userId);
            })

            $(".card:has(#txt-code-manager-" + userId + ") .btn_fail").click(function (e) {
                emitSubmitAnswer("fail");
                hideControlBox(userId);
            })
        }

        function hideControlBox(userId) {
            $('.control-panel').css("display", "none");
        }
    })

</script>

</html>